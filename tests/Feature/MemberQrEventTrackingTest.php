<?php

use App\Models\Event;
use App\Models\EventOccurrence;
use App\Models\MemberCheckIn;
use App\Models\User;
use App\Services\MemberCheckInService;
use App\Services\MemberQrValidator;
use App\Modules\Membership\Models\MembershipLevel;
use App\Modules\Membership\Models\UserMembership;

it('includes event context in member QR code validation and check-in', function () {
    $membershipLevel = MembershipLevel::factory()->create();
    $user = User::factory()->create();
    $scanner = User::factory()->create();
    
    UserMembership::factory()->create([
        'user_id' => $user->id,
        'membership_level_id' => $membershipLevel->id,
        'status' => 'active',
        'expires_at' => now()->addMonth()
    ]);
    
    $event = Event::factory()->create();
    $occurrence = EventOccurrence::factory()->create(['event_id' => $event->id]);
    
    // Simulate QR code data with event context (as generated by frontend)
    $qrData = [
        'userId' => $user->id,
        'userName' => $user->name,
        'email' => $user->email,
        'membershipLevel' => $membershipLevel->getTranslation('name', 'en'),
        'timestamp' => now()->toISOString(),
        'eventContext' => [
            'eventId' => $event->id,
            'eventName' => $event->name,
            'eventOccurrenceId' => $occurrence->id,
            'occurrenceName' => 'Main Show',
            'source' => 'event_detail_page'
        ]
    ];
    
    $qrString = json_encode($qrData);
    
    // Test QR validation extracts event context
    $validator = app(MemberQrValidator::class);
    $validation = $validator->validate($qrString);
    
    expect($validation->isValid())->toBeTrue();
    expect($validation->getData()['_event_id'])->toBe($event->id);
    expect($validation->getData()['_event_occurrence_id'])->toBe($occurrence->id);
    
    // Test check-in service saves event context
    $checkInService = app(MemberCheckInService::class);
    $result = $checkInService->processCheckIn($qrString, [
        'scanner_id' => $scanner->id,
        'location' => 'Main Entrance'
    ]);
    
    expect($result->isSuccess())->toBeTrue();
    
    // Verify event context was saved
    $checkIn = MemberCheckIn::where('user_id', $user->id)->first();
    expect($checkIn)->not->toBeNull();
    expect($checkIn->event_id)->toBe($event->id);
    expect($checkIn->event_occurrence_id)->toBe($occurrence->id);
    expect($checkIn->location)->toBe('Main Entrance');
});

it('handles member QR codes without event context (backward compatibility)', function () {
    $membershipLevel = MembershipLevel::factory()->create();
    $user = User::factory()->create();
    $scanner = User::factory()->create();
    
    UserMembership::factory()->create([
        'user_id' => $user->id,
        'membership_level_id' => $membershipLevel->id,
        'status' => 'active',
        'expires_at' => now()->addMonth()
    ]);
    
    // QR code data without event context (old format)
    $qrData = [
        'userId' => $user->id,
        'userName' => $user->name,
        'email' => $user->email,
        'membershipLevel' => $membershipLevel->getTranslation('name', 'en'),
        'timestamp' => now()->toISOString()
    ];
    
    $qrString = json_encode($qrData);
    
    $checkInService = app(MemberCheckInService::class);
    $result = $checkInService->processCheckIn($qrString, [
        'scanner_id' => $scanner->id
    ]);
    
    expect($result->isSuccess())->toBeTrue();
    
    // Verify check-in was created without event context
    $checkIn = MemberCheckIn::where('user_id', $user->id)->first();
    expect($checkIn)->not->toBeNull();
    expect($checkIn->event_id)->toBeNull();
    expect($checkIn->event_occurrence_id)->toBeNull();
});

it('can query check-ins by event', function () {
    $user1 = User::factory()->create();
    $user2 = User::factory()->create();
    $event1 = Event::factory()->create();
    $event2 = Event::factory()->create();
    
    // Create check-ins for different events
    MemberCheckIn::factory()->create([
        'user_id' => $user1->id,
        'event_id' => $event1->id
    ]);
    
    MemberCheckIn::factory()->create([
        'user_id' => $user2->id,
        'event_id' => $event1->id
    ]);
    
    MemberCheckIn::factory()->create([
        'user_id' => $user1->id,
        'event_id' => $event2->id
    ]);
    
    // Test event-specific queries
    expect(MemberCheckIn::forEvent($event1->id)->count())->toBe(2);
    expect(MemberCheckIn::forEvent($event2->id)->count())->toBe(1);
    
    // Test relationship
    expect($event1->memberCheckIns()->count())->toBe(2);
    expect($event2->memberCheckIns()->count())->toBe(1);
});