---
alwaysApply: false
---

# Frontend Development & Testing Guidelines

This document outlines the standards and practices for frontend development, with a focus on UI/UX, component structure, and robust testing using Playwright.

## 1. Core Principles

- **Development Server**: The local development server is running at **`https://eventplatform.test/`**. All frontend development and E2E testing should target this URL.
- **Mobile-First Design**: All components and pages must be designed for mobile viewports first, then scaled up for larger screens using responsive design principles.
- **Component-Based Architecture**: Follow a strict component-based approach using Vue.js. Components should be reusable, composable, and located in `resources/js/components/`.
- **Inertia.js for Integration**: We use Inertia.js to build a modern, single-page application experience without the complexity of a full client-side router. Refer to [frontend_conventions.mdc](mdc:.cursor/rules/frontend_conventions.mdc) for detailed Inertia.js patterns.

## 2. UI/UX and Layout Testing with Playwright

To ensure visual consistency and prevent layout regressions, we use Playwright for visual regression testing.

### Key Practices:
- **Visual Snapshots**: For key UI components and page layouts, create Playwright tests that take visual snapshots.
- **Stable Test Data**: Use database seeders and factories to ensure a consistent data state for snapshot tests, preventing false positives.
- **Targeted Selectors**: When taking component-level snapshots, use precise selectors to isolate the component and avoid capturing dynamic surrounding content.

### Example Playwright Test for a Component:

```typescript
// tests/e2e/components/EventCard.spec.ts
import { test, expect } from '@playwright/test';

test.describe('EventCard Component', () => {
  test('should render correctly with standard event data', async ({ page }) => {
    // 1. Navigate to a storybook page or a dedicated test page
    await page.goto('/_test/components/EventCard');

    // 2. Locate the component
    const eventCard = page.locator('.event-card');
    await expect(eventCard).toBeVisible();

    // 3. Take a snapshot for visual regression testing
    await expect(eventCard).toHaveScreenshot('event-card-standard.png');
  });
});
```

## 3. End-to-End (E2E) Interaction Testing

While detailed E2E testing guidelines are in `e2e-testing.mdc`, the frontend development process must account for it.

- **Data-Test Attributes**: Use `data-testid` attributes on interactive elements (buttons, inputs, links) to create stable test hooks for Playwright selectors. This decouples tests from CSS classes or text content which may change.
- **Clear API Contracts**: Frontend components should consume data based on the DTOs defined in the backend. Any deviation should be a planned change in the DTO.

## 4. State Management

- **Inertia.js Props**: For page-level data, rely on props passed from Laravel controllers via Inertia.
- **Vue Composables**: For shared, cross-component state within a complex page or feature, use Vue's Composition API (`ref`, `reactive`, `provide`/`inject`). See `resources/js/composables/`.

## 5. File Organization

- **Pages**: `resources/js/pages/{Domain}/{Page}.vue`
- **Reusable Components**: `resources/js/components/{Component}.vue`
- **Domain-Specific Components**: `resources/js/components/{Domain}/{Component}.vue`
- **Types**: `resources/js/types/`
- **Composables**: `resources/js/composables/`
- **E2E Tests**: `tests/e2e/`

For more detailed conventions on Vue.js and Inertia.js, please see [frontend_conventions.mdc](mdc:.cursor/rules/frontend_conventions.mdc).
For a comprehensive E2E testing strategy, refer to [e2e-testing.mdc](mdc:.cursor/rules/e2e-testing.mdc).

2. Filters should sit inside the `#filters` slot; the grid wrapper is handled by `AdminDataTable.vue`.
3. Place pagination **outside** the data table but inside the same card container to match system-wide spacing.

Following this pattern keeps all admin index pages visually aligned and simplifies future style updates.
# Frontend Development & Testing Guidelines

This document outlines the standards and practices for frontend development, with a focus on UI/UX, component structure, and robust testing using Playwright.

## 1. Core Principles

- **Development Server**: The local development server is running at **`https://eventplatform.test/`**. All frontend development and E2E testing should target this URL.
- **Mobile-First Design**: All components and pages must be designed for mobile viewports first, then scaled up for larger screens using responsive design principles.
- **Component-Based Architecture**: Follow a strict component-based approach using Vue.js. Components should be reusable, composable, and located in `resources/js/components/`.
- **Inertia.js for Integration**: We use Inertia.js to build a modern, single-page application experience without the complexity of a full client-side router. Refer to [frontend_conventions.mdc](mdc:.cursor/rules/frontend_conventions.mdc) for detailed Inertia.js patterns.

## 2. UI/UX and Layout Testing with Playwright

To ensure visual consistency and prevent layout regressions, we use Playwright for visual regression testing.

### Key Practices:
- **Visual Snapshots**: For key UI components and page layouts, create Playwright tests that take visual snapshots.
- **Stable Test Data**: Use database seeders and factories to ensure a consistent data state for snapshot tests, preventing false positives.
- **Targeted Selectors**: When taking component-level snapshots, use precise selectors to isolate the component and avoid capturing dynamic surrounding content.

### Example Playwright Test for a Component:

```typescript
// tests/e2e/components/EventCard.spec.ts
import { test, expect } from '@playwright/test';

test.describe('EventCard Component', () => {
  test('should render correctly with standard event data', async ({ page }) => {
    // 1. Navigate to a storybook page or a dedicated test page
    await page.goto('/_test/components/EventCard');

    // 2. Locate the component
    const eventCard = page.locator('.event-card');
    await expect(eventCard).toBeVisible();

    // 3. Take a snapshot for visual regression testing
    await expect(eventCard).toHaveScreenshot('event-card-standard.png');
  });
});
```

## 3. End-to-End (E2E) Interaction Testing

While detailed E2E testing guidelines are in `e2e-testing.mdc`, the frontend development process must account for it.

- **Data-Test Attributes**: Use `data-testid` attributes on interactive elements (buttons, inputs, links) to create stable test hooks for Playwright selectors. This decouples tests from CSS classes or text content which may change.
- **Clear API Contracts**: Frontend components should consume data based on the DTOs defined in the backend. Any deviation should be a planned change in the DTO.

## 4. State Management

- **Inertia.js Props**: For page-level data, rely on props passed from Laravel controllers via Inertia.
- **Vue Composables**: For shared, cross-component state within a complex page or feature, use Vue's Composition API (`ref`, `reactive`, `provide`/`inject`). See `resources/js/composables/`.

## 5. File Organization

- **Pages**: `resources/js/pages/{Domain}/{Page}.vue`
- **Reusable Components**: `resources/js/components/{Component}.vue`
- **Domain-Specific Components**: `resources/js/components/{Domain}/{Component}.vue`
- **Types**: `resources/js/types/`
- **Composables**: `resources/js/composables/`
- **E2E Tests**: `tests/e2e/`

For more detailed conventions on Vue.js and Inertia.js, please see [frontend_conventions.mdc](mdc:.cursor/rules/frontend_conventions.mdc).
For a comprehensive E2E testing strategy, refer to [e2e-testing.mdc](mdc:.cursor/rules/e2e-testing.mdc).

2. Filters should sit inside the `#filters` slot; the grid wrapper is handled by `AdminDataTable.vue`.
3. Place pagination **outside** the data table but inside the same card container to match system-wide spacing.

Following this pattern keeps all admin index pages visually aligned and simplifies future style updates.
