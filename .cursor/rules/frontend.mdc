---
description:
globs: *.vue,*.js,*.ts
alwaysApply: false
---
# Frontend Development Conventions

This document outlines key conventions for frontend development in this Laravel 12 Event Platform project, primarily focusing on Inertia.js with Vue.

## Layouts

-   **Admin Layout**: For all authenticated sections within the admin panel, the primary layout component to use is `[AppLayout.vue](mdc:resources/js/Layouts/AppLayout.vue)`. Ensure all admin Inertia pages correctly import this layout using the alias `import AppLayout from '@/Layouts/AppLayout.vue';`.
    -   **Note on Page Headers**: The `AppLayout.vue` is designed to receive `pageTitle` and `breadcrumbs` as props from the Laravel controller. Therefore, individual pages using `AppLayout.vue` typically **do not** need to use the `#header` slot, as the header content (title and breadcrumbs) is managed by `AppLayout.vue` and its child components like `[AppSidebarHeader.vue](mdc:resources/js/components/AppSidebarHeader.vue)`.

    ```vue
    <script setup lang="ts">
    import AppLayout from '@/Layouts/AppLayout.vue'; // Correct and standard import path
    import { Head } from '@inertiajs/vue3'; // For setting the browser window title
    // ... other imports

    // Props usually include data passed from the controller, e.g., paginated items,
    // and pageTitle/breadcrumbs which are consumed by AppLayout.
    defineProps({
      // exampleEntity: Object,
      // pageTitle: String, // Handled by AppLayout
      // breadcrumbs: Array, // Handled by AppLayout
    });
    </script>

    <template>
        <Head title="Specific Page Title" /> // Use Head for the browser window/tab title
        <AppLayout>
            <!-- The #header slot is typically NOT used here -->
            <!-- AppLayout handles the rendering of pageTitle and breadcrumbs -->

            <!-- Page specific content goes directly here -->
            <div class="py-12">
                <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
                    <!-- ... your content ... -->
                </div>
            </div>
        </AppLayout>
    </template>
    ```

## Design Principles

-   **Mobile-First Design**: The application is designed with a mobile-first approach. Ensure that UIs are responsive and provide an excellent experience on smaller screens before adapting to larger displays.
-   **Reusable Components**: Build the frontend with a strong emphasis on creating and utilizing reusable UI components. This promotes consistency, a unified layout, and development efficiency. Components should be designed for flexibility and composability.

## Admin CRUD Interfaces

-   **Standardized Structure**: For entities requiring administrative management (CRUD operations), the corresponding Inertia.js Vue components are typically located in `resources/js/Pages/Admin/{EntityName}/` (e.g., `resources/js/Pages/Admin/Venues/`, `resources/js/Pages/Admin/Tag/`).
-   **Common Pages**: This usually includes:
    -   `Index.vue`: For listing entities (e.g., `[Index.vue](mdc:resources/js/Pages/Admin/Venues/Index.vue)`). Typically features a "Create Entity" button aligned to the top-right of the content area, above the table or list of items. The main content area uses a consistent card-like container.
    -   `Create.vue`: A form for creating a new entity (e.g., `[Create.vue](mdc:resources/js/Pages/Admin/Venues/Create.vue)`).
    -   `Edit.vue`: A form for updating an existing entity, pre-filled with its data (e.g., `[Edit.vue](mdc:resources/js/Pages/Admin/Venues/Edit.vue)`).
-   **Interaction**: These components interact with the backend through defined Actions and Services, via their respective Controllers (e.g., `[VenueController.php](mdc:app/Http/Controllers/Admin/VenueController.php)`).
-   **Layout Usage**: All these admin CRUD pages must use the `[AppLayout.vue](mdc:resources/js/Layouts/AppLayout.vue)` as described in the "Layouts" section, receiving `pageTitle` and `breadcrumbs` from their respective controller methods.

## Styling

-   **Tailwind CSS**: The project utilizes Tailwind CSS for styling. Adhere to Tailwind's utility-first approach.
-   **Global Styles**: Global styles or overrides are located in `resources/css/app.css`.

Refer to [vite.config.ts](mdc:vite.config.ts) for frontend build configuration and aliases (e.g., `@` pointing to `resources/js`).

## Rich Text Editor (TipTap)

-   **Editor Choice**: The project will use **TipTap** (via `@tiptap/vue-3` and relevant extensions) as the primary rich text editor.
-   **Reusable Component**: The TipTap editor will be wrapped into a reusable Vue component (e.g., `resources/js/Components/Form/RichTextEditor.vue`) to ensure consistency and ease of use across different forms.
-   **Intended Use**: This rich editor component is intended for fields requiring formatted text input, such as `description` fields (e.g., for Venues, Events) and potentially `summary` fields or other similar long-form text areas across various entities.
-   **Key Features**: The editor integration will aim to support:
    -   Basic text formatting (bold, italic, lists, headings, etc.).
    -   Image uploading and insertion (managed through a custom backend endpoint).
    -   YouTube video embedding.
-   **Customization**: TipTap's headless nature allows for a custom toolbar and UI to be built using Tailwind CSS, ensuring it matches the application's design system.
-   **Content Handling**: The output from the editor will typically be HTML. Server-side sanitization (e.g., using HTMLPurifier) will be crucial before storing the content in the database.

## Page Headers: Title & Breadcrumbs

-   **Purpose**: To provide clear context and navigation for users on every page within the admin panel.
-   **Key Components**:
    -   **`[AppLayout.vue](mdc:resources/js/Layouts/AppLayout.vue)`**: The primary layout for admin pages. It accepts `pageTitle` (string) and `breadcrumbs` (array) as props.
    -   **`[AppSidebarLayout.vue](mdc:resources/js/layouts/app/AppSidebarLayout.vue)`**: An inner layout component utilized by `AppLayout.vue`. It receives `pageTitle` and `breadcrumbs` and passes them to `[AppSidebarHeader.vue](mdc:resources/js/components/AppSidebarHeader.vue)`.
    -   **`[AppSidebarHeader.vue](mdc:resources/js/components/AppSidebarHeader.vue)`**: This component is responsible for rendering the `pageTitle` (typically as an `<h1>` HTML element) and the breadcrumb navigation.
    -   **`[Breadcrumbs.vue](mdc:resources/js/components/Breadcrumbs.vue)`**: The component that renders the actual list of breadcrumb links.
-   **Data Flow & Structure**:
    -   Laravel controller methods (e.g., in `[VenueController.php](mdc:app/Http/Controllers/Admin/VenueController.php)`, `[TagController.php](mdc:app/Http/Controllers/Admin/TagController.php)`) that render Inertia pages must pass `pageTitle` (string) and `breadcrumbs` (array of objects) data to the view. Example from `TagController@index`:
        ```php
        return Inertia::render('Admin/Tag/Index', [
            'pageTitle' => 'Tags',
            'breadcrumbs' => [
                ['text' => 'Admin', 'href' => route('admin.dashboard')],
                ['text' => 'Tags'] // Current page, no href
            ],
            'tags' => $tags, // Page-specific data
        ]);
        ```
    -   `pageTitle`: A string representing the main title of the page (e.g., "Manage Venues", "Create New Tag").
    -   `breadcrumbs`: An array of objects, where each object represents a link in the breadcrumb trail.
        -   Example: `[{ text: 'Admin', href: route('admin.dashboard') }, { text: 'Tags', href: route('admin.tags.index') }, { text: 'Create Tag' }]`
        -   The last item in the array, representing the current page, typically does not have an `href` property.
-   **Usage & Layout Consistency**:
    -   The `pageTitle` will be prominently displayed in the header area managed by `AppLayout.vue` / `AppSidebarHeader.vue`.
    -   Breadcrumbs provide a clear navigational path.
    -   All Inertia pages within the admin section must provide these props for a consistent header. The overall page structure for index pages (e.g., listing entities) should follow the pattern seen in `[Venues/Index.vue](mdc:resources/js/Pages/Admin/Venues/Index.vue)` and `[Tag/Index.vue](mdc:resources/js/Pages/Admin/Tag/Index.vue)`, where a "Create" button is typically placed at the top-right of the main content card, above the table listing items.

## Handling Complex Forms with Translatable Fields and File Uploads

Recent experience with the `Venues/Edit.vue` form highlighted critical considerations for robust form submissions, especially when dealing with translatable fields (managed by `spatie/laravel-translatable` on the backend) and file uploads, using Inertia.js and `spatie/laravel-data` DTOs.

### 1. Aligning Frontend Data Structure with Backend DTOs

-   **DTO Expectation**: Backend DTOs (e.g., `VenueData.php`) that handle translatable fields should expect these fields as nested associative arrays. For example, a `name` field translated into English and Traditional Chinese should be structured in the DTO as `public readonly array $name;`.
-   **Frontend Submission (`form.transform`)**: The `form.transform()` method in your Inertia.js Vue component is the place to ensure the submitted data matches this DTO structure.
    -   **Correct Structure**: For a translatable field like `name`, the transformed data should be:
        ```javascript
        // In form.transform(data => { ... return dataForSubmission; })
        dataForSubmission.name = {
            en: data.name.en, // Assuming form.name.en holds the English value
            'zh-TW': data.name['zh-TW'] // Assuming form.name['zh-TW'] holds the Traditional Chinese value
            // ... other locales
        };
        ```
    -   **Avoid Flattening**: Do not flatten these fields into `name[en]`, `name[zh-TW]` *within the `form.transform` if the DTO expects a nested `name` object*. While PHP can parse flattened fields from `multipart/form-data` into nested arrays for `$_POST`, `spatie/laravel-data` DTOs hydrate more directly from the structure of the array passed to `DTO::from()`. If `DTO::from($request->all())` is used, `$request->all()` should contain a top-level `name` key with the nested translations.
-   **Consistency**: This nested structure ensures that the data sent by the frontend directly maps to the DTO, which in turn maps cleanly to how `spatie/laravel-translatable` expects data for model updates.

### 2. Inertia.js, `FormData`, and Content Types

-   **Automatic `multipart/form-data`**: Inertia.js (`@inertiajs/vue3`) automatically constructs a `FormData` object and uses `multipart/form-data` for the request if `File` objects are present in the form data being submitted. This is crucial for file uploads.
-   **`application/json`**: If no `File` objects are present, Inertia.js typically sends the data as `application/json`.
-   **Using `form.post` for PUT/PATCH with Files**: When submitting forms that include file uploads and require a PUT or PATCH HTTP method, it is best practice to use `form.post()` and include a `_method: 'PUT'` (or `'PATCH'`) field in the data submitted within `form.transform()`. This ensures that Inertia.js correctly processes the form as `multipart/form-data` due to the presence of files, while Laravel correctly routes the request as a PUT or PATCH request due to the `_method` field.
    ```javascript
    // In form.transform(data => { ... })
    const dataForSubmission = { /* ... other data ... */ };
    dataForSubmission[\'_method\'] = \'PUT\'; // Or \'PATCH\'
    return dataForSubmission;

    // Then, in the submit function:
    // form.post(route(\'your.update.route\', F...), {
    //     // ... options ...
    // });
    ```
-   **Backend Parsing**:
    -   Laravel correctly parses `multipart/form-data` submissions, including fields named with array syntax (e.g., `name[en]`, `gallery_images[]`), into nested arrays in the `Request` object. So, even if `FormData` sends `name[en]`, `$request->input('name')` would yield `['en' => 'value']`.
    -   However, for maximum clarity and direct mapping to DTOs expecting a top-level `name` key with a translation array, ensuring `form.transform` prepares data like `dataToSubmission.name = {en: '...', ...}` is robust. `spatie/laravel-data` will then correctly map this structure when creating the DTO from `$request->all()`.

### 3. Cross-Referencing Backend Considerations

-   Ensure backend DTOs (see `project_overview.mdc` on `spatie/laravel-data`) are defined to expect translatable fields as arrays (e.g., `public readonly array $name`).
-   Validation rules in the DTO should target specific locales (e.g., `name.en => 'required'`).
-   The Eloquent model using `spatie/laravel-translatable` must have the field listed in its `$translatable` array and typically in `$fillable`.
-   Be aware of server-side configurations like `post_max_size` and `max_input_vars` in `php.ini`, as these can truncate complex form data before it even reaches Laravel. Refer to `project_overview.mdc` for details.

By following these conventions, complex form submissions involving translatable data and file uploads can be handled more reliably, reducing debugging time and potential data loss.
